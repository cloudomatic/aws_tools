#!/bin/bash


#
#  Create a t2.micro VM in AWS EC2 and install the target WAR file via Ansible.   Note that the Ansible playbook (see configure_ec2_instance) will be pulled from Github and not 
#  from the local (locally cloned) Git repo.
#
#


###### Make sure to set the path to the AWS CLI 
export PATH=$PATH:~/.local/bin

###### Change these if needed
ec2_instance_name=artofwar01
cloudformation_template=cloudformation/single_ec2_instance_with_ansible_launcher.yaml
# If you don't want to create an access key, set "create" to false here and specify the access key nam
create_new_ec2_access_key=true
aws_ec2_access_key_name=ec2_key_artofwar01
aws_ec2_access_keyfile_name=./artofwar01.pem
aws_cloudformation_stack_name=cf-artofwar-stack01
ec2_ami_id=ami-6b8cef13
ec2_instance_ssh_username=ec2-user
ec2_configuration_script_url=https://raw.githubusercontent.com/cloudomatic/ArtOfWAR/master/install/configure_ec2_instance
#
# Validates that the Python-based AWS CLI is available and that user credentials have been configured
#
validate_aws_cli() {
  if [ `aws ec2 describe-regions | grep "us-east" | wc -l` -lt 2 ]; then
    echo -e "\n\n [`basename "$0"`] validate_aws_cli(): Error: Could not find the AWS cli command <aws> in path \n\n"
    exit 1
  else
    return 0
  fi 
}

# 
#  Use this routine to create an EC2 access key.  
#
create_ec2_access_key() {
  if ! validate_aws_cli; then
    echo -e "\n\n [`basename "$0"`] create_ec2_access_key(): Error: Could not validate the AWS EC2 CLI.  Validate that the "aws" command is in the current PATH. \n\n"
    exit 1
  fi

  if [ -r $aws_ec2_access_keyfile_name ]; then
    echo -e "\n\n [`basename "$0"`] create_ec2_access_key(): EC2 access keyfile detected, skipping new key creation \n"
    return
  fi

  echo -e "\n  [`basename "$0"`] create_ec2_access_key(): Creating the EC2 access key \n"
  # Create the key in AWS
  aws ec2 create-key-pair --key-name $aws_ec2_access_key_name --output text> $aws_ec2_access_keyfile_name.tmp
  
  # For some reason these always need to be trimmed, or else SSH thinks it's an encrypted private key due to the extra characters
  cat $aws_ec2_access_keyfile_name.tmp  | sed 's/-----BEGIN/\n-----BEGIN/g' | sed 's/END RSA PRIVATE KEY-----/END RSA PRIVATE KEY-----\n/g' | head -24 | tail -23 > $aws_ec2_access_keyfile_name
  chmod go-rwx $aws_ec2_access_keyfile_name

  # Validate
  if [ ` ssh-keygen -f $aws_ec2_access_keyfile_name  -y | grep ssh-rsa | wc -l` -gt 0 ]; then
    rm $aws_ec2_access_keyfile_name.tmp
    echo -e  "\n\n [`basename "$0"`] Success: Created key pair "$aws_ec2_access_key_name" ($aws_ec2_access_keyfile_name) \n\n"
  else 
     echo -e "\n\n [`basename "$0"`] Error: The file <$aws_ec2_access_keyfile_name.tmp> failed validation \n\n"
  fi
}

#
# Retrieves the public IP address of an EC2 instance
#
get_ec2_instance_public_ip_address() {
  instance_name=$1

  if ! validate_aws_cli; then
    echo -e "\n\n [`basename "$0"`]: get_ec2_instance_public_ip_address():  Error: Could not validate the AWS EC2 CLI.  Validate that the "aws" command is in the current PATH. \n\n"
    exit 1
  fi
  ip_address=`aws ec2 describe-instances --filters "Name=tag-value,Values=$instance_name" --query Reservations[0].Instances[0].PublicIpAddress | sed 's/\"//g'`
  if [ x$ip_address == xnull ] ||  [ x$ip_address == x ]; then
    echo "ERROR: get_instance_public_ip_address(): Could not retrieve an ip address for instance: [$instance_name]"
    exit 2 
  fi
  echo $ip_address
}


#
# Create an EC2 instance using the cloudformation template
#
create_ec2_instance() {
  if ! validate_aws_cli; then 
    echo -e "\n\n [`basename "$0"`]: create_ec2_instance(): Error: Could not validate the AWS EC2 CLI.  Validate that the "aws" command is in the current PATH. \n\n"
    exit 1
  fi
  if [ ! -r $cloudformation_template ]; then
    echo -e "\n\n [`basename "$0"`] create_ec2_instance(): Error: Could not validate the cloudformation template <$cloudformation_template> \n\n"
    exit 2 
  fi
  if [ ! -r $aws_ec2_access_keyfile_name ]; then
    echo -e "\n\n [`basename "$0"`]: create_ec2_instance(): Error: Could not validate the EC2 keyfilename <$aws_ec2_access_keyfile_name>.  Update the install shell script with the appropriate EC2 access key and key file name to create and access the <$ec2_instance_name> instance. \n\n"
    exit 3
  fi
  aws_cloudformation_create_stack_command=`echo aws cloudformation create-stack --stack-name $aws_cloudformation_stack_name --template-body "file://$cloudformation_template" --parameters ParameterKey=KeyName,ParameterValue=$aws_ec2_access_key_name ParameterKey=InstanceName,ParameterValue=$ec2_instance_name ParameterKey=AMIId,ParameterValue=$ec2_ami_id ParameterKey=ConfigurationScript,ParameterValue=$ec2_configuration_script_url`
  echo -e "\n [`basename "$0"`]: create_ec2_instance(): Creating the AWS cloudformation stack with command: $aws_cloudformation_create_stack_command"
  $aws_cloudformation_create_stack_command 

  sleep 15
 
  # Note that if this were something other than a t2.micro instance, we should block here until the instance state is "Running"

  ip_address_of_ec2_instance=`get_ec2_instance_public_ip_address $ec2_instance_name`

  echo -e "\n  [`basename "$0"`] Use 'ssh -i $aws_ec2_access_keyfile_name $ec2_instance_ssh_username@$ip_address_of_ec2_instance' to access the EC2 target instance.\n"
}

#
# A cleanup routine.  The stack can also be deleted from the AWS console.
#
delete_ec2_instance() {
   echo -e "\n  [`basename "$0"`]: delete_ec2_instance(): Deleting stack "$aws_cloudformation_stack_name" \n\n"
  aws cloudformation delete-stack --stack-name $aws_cloudformation_stack_name
}


# Start of main program

# Enable CLI access to any function
if [ $# -gt 0 ]; then
  $@ 
  exit 1
fi

if [ "$create_new_ec2_access_key" = "true" ]; then
  create_ec2_access_key
fi
create_ec2_instance
#delete_ec2_instance
