#!/bin/sh

# This program will create an ansible "control" node which will serve as the master for the demo.  
#
# For the initial setup on the Mac OS X client "a.k.a. The Demo Laptop", run the following (this should already be done):
#   - pip install awscli --user
#   - Add ~/Library/Python/2.7/bin/aws to path
#   - Create a user via the administrative console in the "admin" group
#   - Run aws configure using the ID generated above (us-west-2) output format=json
#   - Test the CLI:
#         aws ec2 describe-regions --output table
#

####### User-defined customizations (adjust for future demos)
ingress_network_cidr_block="0.0.0.0/0"
# Not implemented, existing ssh key must be "false"
use_existing_ssh_key=false
ansible_ec2_instance_key_name="key_ansible_ec2_master_access_key"
ansible_ec2_instance_ssh_key_file="/tmp/key_ansible_ec2_master_access_key.pem"

##### Suggest not changing these
# aws-linux
ansible_ec2_instance_ami_to_use="ami-6b8cef13" 
# Ubuntu
#ansible_ec2_instance_ami_to_use="ami-6e1a0117"
ansible_ec2_instance_name="ansible_ec2_master_instance"
ansible_ec2_instance_security_group_name="sg_ansible_ec2_master_instance"
ansible_ec2_instance_availability_zone="us-west-2b"
# Didn't implement multipe tags
ansible_ec2_instance_tag_list=""
DEBUG=1

#
# Terminate the control node and all resources
#
cleanup() {
  vm_instance_id=`aws ec2 describe-instances --filters "Name=tag-value,Values=$ansible_ec2_instance_name" --query Reservations[0].Instances[0].InstanceId | sed 's/\"//g'`
  if [ x$vm_instance_id == xnull ]; then
    echo "The instance name [$ansible_ec2_instance_name] was not found"
  else
    aws ec2 terminate-instances --instance-ids $vm_instance_id
    echo -e "Waiting for [$ansible_ec2_instance_name] to terminate...\c"
    for retry in 1 2 3 4 5; do
      ansible_ec2_instance_state=`aws ec2 describe-instances --filter "Name=tag-value,Values=ansible_ec2_master_instance" --query Reservations[*].Instances[*].State.Name --output text`
      if [ x$ansible_ec2_instance_state != "xterminated" ]; then
        echo  "Waiting for state \"terminated\".  Current state: $ansible_ec2_instance_state"
        sleep 10
      fi
      echo ""
    done
    ansible_ec2_instance_state=`aws ec2 describe-instances --filter "Name=tag-value,Values=ansible_ec2_master_instance" --query Reservations[*].Instances[*].State.Name --output text`
    if [ $ansible_ec2_instance_state != "terminated" ]; then
        echo "ERROR!  Instance not terminated"
        exit 5
    fi
  fi
  aws ec2 delete-key-pair --key-name $ansible_ec2_instance_key_name
  aws ec2 delete-security-group --group-name $ansible_ec2_instance_security_group_name
}


create_simple_ec2_SSH_HTTP_security_group() {
  security_group_name_to_create=$1
  ingress_cidr_block=$2

  if [ -z $security_group_name_to_create ] || [ -z $ingress_cidr_block ]; then
    echo "ERROR: Invalid security group name [$security_group_name_to_create] in create_simple_ec2_SSH_HTTP_security_group()"
    exit 1
  fi

  echo "Checking for security group [$security_group_name_to_create]..."
  existing_security_group_name=`aws ec2 describe-security-groups --group-name $security_group_name_to_create --query SecurityGroups[0].GroupName 2>/dev/null | sed 's/\"//g'` 
  # WARNING:  We exit here if the group exists, but don't check the authorizations
  if [ x$existing_security_group_name != "x$security_group_name_to_create" ]; then
    echo "Creating security group [$security_group_name_to_create]...."
    aws ec2 create-security-group --group-name $security_group_name_to_create --description "Ability to SSH to EC2 instances and run commands"
    aws ec2 authorize-security-group-ingress --group-name $security_group_name_to_create --protocol tcp --port 22 --cidr $ingress_cidr_block
    aws ec2 authorize-security-group-ingress --group-name $security_group_name_to_create --protocol tcp --port 8080 --cidr $ingress_cidr_block
    aws ec2 authorize-security-group-ingress --group-name $security_group_name_to_create --protocol icmp --port -1 --cidr $ingress_cidr_block

    new_security_group_name=`aws ec2 describe-security-groups --group-names $security_group_name_to_create --query SecurityGroups[0].GroupName 2>/dev/null | sed 's/\"//g'`
    if [ x$new_security_group_name != x$security_group_name_to_create ]; then
      echo "Fatal error, could not create security group (security_group_name from create command came back as $new_security_group_name)"
      exit 1
    fi
  fi
  #export ansible_ec2_instance_security_group_id=`aws ec2 describe-security-groups --group-names sg_ec2_ssh --query SecurityGroups[0].GroupId | sed 's/\"//g'`
}

create_key_pair() {
  # WARNING: For some reason the key pair comes out with extra lines that need to be trimmed, it is not Linux CLI "ssh -i <key-file>" ready
  key_pair_name=$1
  private_key_file=$2

  if [ -z $key_pair_name ] || [ -z $private_key_file ]; then
    echo "ERROR: Invalid key_pair_name in  create_key_pair()"
    exit 2
  fi

  echo "Checking for SSH key [$key_pair_name]..."
  existing_key_name=`aws ec2 describe-key-pairs --key-name $key_pair_name --query KeyPairs[0].KeyName 2>/dev/null | sed 's/\"//g' `
  if [ x$existing_key_name != x$key_pair_name ]; then
    echo "Creating SSH key [$key_pair_name]..."
    aws ec2 create-key-pair --key-name $key_pair_name --output text > $private_key_file
    new_key_name=`aws ec2 describe-key-pairs --key-name $key_pair_name --query KeyPairs[0].KeyName | sed 's/\"//g'`
    if [ -r $private_key_file ]; then 
      chmod go-rwx $private_key_file
    else 
      echo "ERROR: Could not locate private key file [$private_key_file] after creating key pair in create_key_pair()"
      exit 3
    fi
    if [ x$new_key_name != x$key_pair_name ]; then
      echo "Fatal error, could not create key pair [$key_pair_name] in create_key_pair():  new_key_name from create command came back as [$new_key_name]"
      exit 2
    fi
  fi

}

create_instance() {
  ami_to_use=$1
  #instance_type_to_create=$2
  instance_type_to_create=t2.micro
  tag_list=$3
  security_group_name=$4
  ssh_key_name=$5
  instance_name=$6

  echo "Checking for the VM instance..."
  existing_vm_instance_id=`aws ec2 describe-instances --filters "Name=tag-value,Values=$instance_name" --query Reservations[0].Instances[0].InstanceId | sed 's/\"//g'`
  if [ x$existing_vm_instance_id == xnull ]; then
    echo "Creating the VM..."
  else 
   echo "Instance exists... TO DO: Check if in a terminated state and continue..."
  fi
  ec2_run_instance_command="aws ec2 run-instances --image-id $ami_to_use --security-groups $security_group_name --count 1 --instance-type $instance_type_to_create --key-name $ssh_key_name --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=$instance_name}]" --placement AvailabilityZone=$ansible_ec2_instance_availability_zone"
  echo "Creating instance with: $ec2_run_instance_command"
  $ec2_run_instance_command
  sleep 5
  new_vm_instance_id=`aws ec2 describe-instances --filters "Name=tag-value,Values=$instance_name" --query Reservations[0].Instances[0].InstanceId | sed 's/\"//g'`
  if [ x$new_vm_instance_id == xnull ]; then
      echo "Fatal error, could not create instance in create_instance()  (new_instance_id after create came back as [$new_instance_id])"
      exit 3
  fi
}

get_instance_public_ip_address() {
  instance_name=$1
  ip_address=`aws ec2 describe-instances --filters "Name=tag-value,Values=$instance_name" --query Reservations[0].Instances[0].PublicIpAddress | sed 's/\"//g'`
  echo $ip_address
}

configure_instance_with_ansible() {
  ec2_instance_access_user_id=ec2-user
  public_ip_address=$1
  ssh_key_file=$2

  ### Cache the new host's key on the local machine to enable remote SSH commands
  ssh-keyscan -H $public_ip_address  >> ~/.ssh/known_hosts

  ### Setup the ansible runtime
  ssh -i $ssh_key_file $ec2_instance_access_user_id@$public_ip_address "sudo pip install ansible && sudo yum install -y git"


  ### Configure the localhost (or target nodes) for ansible control via this ID
  ssh -i $ssh_key_file $ec2_instance_access_user_id@$public_ip_address "ssh-keygen -t rsa -N \"\" -f /home/ec2-user/.ssh/id_rsa"
  ssh -i $ssh_key_file $ec2_instance_access_user_id@$public_ip_address "cat /home/ec2-user/.ssh/id_rsa.pub >> /home/ec2-user/.ssh/authorized_keys "
  ssh -i $ssh_key_file $ec2_instance_access_user_id@$public_ip_address ssh-keyscan -H localhost  /home/ec2-user/.ssh/known_hosts

}


configure_instance_with_elastic() {
  # https://github.com/elastic/ansible-elasticsearch

  ec2_instance_access_user_id=ec2-user
  public_ip_address=$1
  ssh_key_file=$2

  #### Download a playbook for Elastic.
  ssh -i $ssh_key_file $ec2_instance_access_user_id@$public_ip_address "sudo mkdir -p /var/ansible/playbooks && \
                                                                        sudo chown ec2-user /var/ansible/playbooks && \
                                                                        cd /var/ansible/playbooks && \
                                                                        git clone https://github.com/elastic/ansible-elasticsearch.git && \
                                                                        echo ."

  echo ssh -i $ssh_key_file $ec2_instance_access_user_id@$public_ip_address "sudo mkdir -p /var/ansible/playbooks/ansible-elasticsearch-customized && \
                                                                        sudo chown ec2-user /var/ansible/playbooks/ansible-elasticsearch-customized && \
                                                                        cd /var/ansible/playbooks/ansible-elasticsearch-customized && \
                                                                        echo localhost > hosts && \
                                                                        echo -e '- name: Simple Example \n  hosts: localhost\n  roles:\n    - { role: elasticsearch, es_instance_name: \"node1\" } \n  vars:\n' > /var/ansible/playbooks/ansible-elasticsearch-customized/site.yml && \
                                                                        mkdir  mkdir /var/ansible/playbooks/ansible-elasticsearch-customized/roles && \
                                                                        ln -s /var/ansible/playbooks/ansible-elasticsearch /var/ansible/playbooks/ansible-elasticsearch-customized/roles/elasticsearch && \
                                                                        ansible-playbook -i hosts site.yml -vvv && \
                                                                        echo ."

}

configure_instance_with_jboss() {
  ec2_instance_access_user_id=ec2-user
  public_ip_address=$1
  ssh_key_file=$2

  #### Download a playbook for JBoss.  Note that this would come from our corp github server, and would be modified for our installation customization
  ssh -i $ssh_key_file $ec2_instance_access_user_id@$public_ip_address "sudo mkdir -p /var/ansible/playbooks && \
                                                                        sudo chown ec2-user /var/ansible/playbooks && \
                                                                        cd /var/ansible/playbooks && \
                                                                        git clone https://github.com/comicide/ansible-examples.git && \
                                                                        echo ."
  #### Run the installation
  ssh -i $ssh_key_file $ec2_instance_access_user_id@$public_ip_address "cd /var/ansible/playbooks/ansible-examples/jboss-standalone && \
                                                                        echo localhost > hosts && \
                                                                        ansible-playbook -i hosts site.yml -vvv && \
                                                                        echo ."
}


check_prerequisites() {
  if [ `aws --version 2>&1 | grep "aws-cli" | wc -c` -gt 2 ]; then 
    return 0
  else 
    echo "\n\nERROR: Check that the AWS CLI is installed and in the current PATH\n\n"
    return 1
  fi
}

#
# Create the ansible EC2 control node
#
create_ansible_ec2_instance() {
 #create_simple_ec2_SSH_HTTP_security_group $ansible_ec2_instance_security_group_name $ingress_network_cidr_block
 #create_key_pair $ansible_ec2_instance_key_name $ansible_ec2_instance_ssh_key_file
 #create_instance $ansible_ec2_instance_ami_to_use t1.micro null $ansible_ec2_instance_security_group_name $ansible_ec2_instance_key_name $ansible_ec2_instance_name
 # Need to manually trim the key file here
 #configure_instance_with_ansible `get_instance_public_ip_address $ansible_ec2_instance_name` $ansible_ec2_instance_ssh_key_file
 configure_instance_with_jboss `get_instance_public_ip_address $ansible_ec2_instance_name` $ansible_ec2_instance_ssh_key_file
 #configure_instance_with_elastic `get_instance_public_ip_address $ansible_ec2_instance_name` $ansible_ec2_instance_ssh_key_file

}

if check_prerequisites; then 
 create_ansible_ec2_instance
# cleanup
fi




